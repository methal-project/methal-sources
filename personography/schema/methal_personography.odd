<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns:sch="http://purl.oclc.org/dsdl/schematron"
     xmlns="http://www.tei-c.org/ns/1.0"
     xml:lang="en">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>TEI customization for MeThAL personography</title>
            <author>Pablo Ruiz Fabo</author>
         </titleStmt>
         <publicationStmt>
            <publisher>LiLPa - Universit√© de Strasbourg</publisher>
            <publisher>MeThAL project</publisher>
            <availability status="free">
               <licence target="http://creativecommons.org/licenses/by-nc/4.0/">Creative Commons BY-NC</licence>
            </availability>
         </publicationStmt>
         <notesStmt>
            <note type="ns">https://methal.eu</note>
         </notesStmt>
         <sourceDesc>
            <p>Written from scratch.</p>
         </sourceDesc>
      </fileDesc>
   </teiHeader>
   <text>
      <body>
         <head>TEI for MeThAL project personography</head>
         <schemaSpec ident="tei_methal_personography">
            <moduleRef n="01" key="tei"/>
            <moduleRef n="02" key="header"/>
            <moduleRef n="03" key="core"/>
            <moduleRef n="04" key="textstructure"/>
            <moduleRef n="17" key="analysis"/>
            <moduleRef n="10" key="msdescription"/>
            <moduleRef n="11" key="transcr"/>
            <moduleRef n="13" key="namesdates"/>
            <moduleRef n="16" key="linking"/>
            <moduleRef n="18" key="iso-fs"/>
            <moduleRef n="21" key="certainty"/>
            <moduleRef n="22" key="tagdocs"/>
            <elementSpec ident="fs" module="iso-fs" mode="change">
               <constraintSpec scheme="schematron" ident="fs_constraints">
                  <desc>Schematron constraints created from processing the Feature
                                        System declaration</desc>
                  <constraint>
                     <sch:rule context="tei:text/descendant::tei:fs[@type eq 'character_specification']">
                        <sch:assert test="tei:f/@name = 'specification_type'"> The feature
                            specification_type is mandatory </sch:assert>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:fs[@type eq 'mimetic_features']">
                        <sch:report test="tei:f[not(@name = ('general', 'socio_economic_status', 'relation_position', 'language'))]"> Possible features: 'general, socio_economic_status, relation_position, language'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:fs[@type eq 'general_features']">
                        <sch:report test="tei:f[not(@name = ('temper', 'age_features', 'sex', 'nationality', 'ontological_category'))]"> Possible features: 'temper, age_features, sex, nationality, ontological_category'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:fs[@type eq 'age']">
                        <sch:assert test="tei:f/@name = 'age_value'"> The feature
                            age_value is mandatory </sch:assert>
                        <sch:assert test="if (count(tei:f) gt 1) then tei:f[@name = ('precision')] else true()"> Possible features: 'precision'</sch:assert>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:fs[@type eq 'relation_type']">
                        <sch:report test="tei:f[not(@name = ('family_position', 'personal_position', 'professional_position'))]"> Possible features: 'family_position, personal_position, professional_position'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:fs[@type eq 'professional_activities']">
                        <sch:report test="tei:f[not(@name = ('professional_category', 'occupation'))]"> Possible features: 'professional_category, occupation'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:fs[@type eq 'socio_economic_other']">
                        <sch:report test="tei:f[not(@name = ('social_class', 'socioeconomic_status_cerf'))]"> Possible features: 'social_class, socioeconomic_status_cerf'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:fs[@type eq 'synthetic_features']">
                        <sch:report test="tei:f[not(@name = ('collective_character', 'actantial_role'))]"> Possible features: 'collective_character, actantial_role'</sch:report>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
            </elementSpec>
            <elementSpec ident="f" module="iso-fs" mode="change">
               <constraintSpec scheme="schematron" ident="f_constraints">
                  <desc>Schematron constraints created from processing the Feature
                                        System declaration</desc>
                  <constraint>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'specification_type'][parent::tei:fs[@type eq 'character_specification']]">
                        <sch:report test="if (tei:vColl/tei:fs) then tei:vColl/tei:fs[not(@type = ('mimetic_features', 'synthetic_features'))] else false()"> Possible values of fs/@type are: 'mimetic_features', 'synthetic_features'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'general'][parent::tei:fs[@type eq 'mimetic_features']]">
                        <sch:report test="tei:fs[not(@type = ('general_features'))]"> Mandatory fs of @type general_features</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'socio_economic_status'][parent::tei:fs[@type eq 'mimetic_features']]">
                        <sch:report test="if (tei:vColl/tei:fs) then tei:vColl/tei:fs[not(@type = ('professional_activities', 'socio_economic_other'))] else false()"> Possible values of fs/@type are: 'professional_activities', 'socio_economic_other'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'relation_position'][parent::tei:fs[@type eq 'mimetic_features']]">
                        <sch:report test="tei:fs[not(@type = ('relation_type'))]"> Mandatory fs of @type relation_type</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'language'][parent::tei:fs[@type eq 'mimetic_features']]">
                        <sch:assert test="tei:default or tei:string">
                    Element string or element default is mandatory
                </sch:assert>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'temper'][parent::tei:fs[@type eq 'general_features']]">
                        <sch:assert test="tei:string"> Element string is
                    mandatory </sch:assert>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'age_features'][parent::tei:fs[@type eq 'general_features']]">
                        <sch:report test="tei:fs[not(@type = ('age'))]"> Mandatory fs of @type age</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'sex'][parent::tei:fs[@type eq 'general_features']]">
                        <sch:report test="tei:symbol[not(@value = ('M', 'F', 'U', 'B'))]"> Incorrect value of @value. Possible values are:
                                'M, F, U, B'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'nationality'][parent::tei:fs[@type eq 'general_features']]">
                        <sch:assert test="tei:string"> Element string is
                    mandatory </sch:assert>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'ontological_category'][parent::tei:fs[@type eq 'general_features']]">
                        <sch:report test="tei:symbol[not(@value = ('human', 'non-human', 'semi-human'))]"> Incorrect value of @value. Possible values are:
                                'human, non-human, semi-human'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'age_value'][parent::tei:fs[@type eq 'age']]">
                        <sch:assert test="tei:numeric or tei:symbol"> This feature must have one of the following elements:
                        numeric, symbol</sch:assert>
                        <sch:report test="tei:symbol[not(@value = ('young', 'old', 'child', 'adult', 'unknown'))]"> Incorrect value of symbol. Possible values are:
                            'young, old, child, adult, unknown'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'precision'][parent::tei:fs[@type eq 'age']]">
                        <sch:report test="tei:symbol[not(@value = ('exact', 'approximate'))]"> Incorrect value of @value. Possible values are:
                                'exact, approximate'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'family_position'][parent::tei:fs[@type eq 'relation_type']]">
                        <sch:report test="if (tei:symbol) then tei:symbol[not(@value = ('father', 'son', 'daughter', 'mother', 'uncle', 'aunt', 'nephew_or_niece', 'sister', 'brother', 'grandfather', 'grandmother', 'grandson', 'granddaughter', 'cousin', 'stepmother', 'stepfather', 'stepdaughter', 'stepson', 'guardian', 'ward', 'husband', 'ex-husband', 'wife', 'ex-wife', 'separated_husband', 'separated_wife', 'widower', 'widow', 'father-in-law', 'mother-in-law', 'brother-in-law', 'sister-in-law', 'son-in-law', 'daughter-in-law'))] else false()"> Possible values of symbol/@value are: 'father', 'son', 'daughter', 'mother', 'uncle', 'aunt', 'nephew_or_niece', 'sister', 'brother', 'grandfather', 'grandmother', 'grandson', 'granddaughter', 'cousin', 'stepmother', 'stepfather', 'stepdaughter', 'stepson', 'guardian', 'ward', 'husband', 'ex-husband', 'wife', 'ex-wife', 'separated_husband', 'separated_wife', 'widower', 'widow', 'father-in-law', 'mother-in-law', 'brother-in-law', 'sister-in-law', 'son-in-law', 'daughter-in-law'</sch:report>
                        <sch:report test="if (tei:vColl/tei:symbol) then tei:vColl/tei:symbol[not(@value = ('father', 'son', 'daughter', 'mother', 'uncle', 'aunt', 'nephew_or_niece', 'sister', 'brother', 'grandfather', 'grandmother', 'grandson', 'granddaughter', 'cousin', 'stepmother', 'stepfather', 'stepdaughter', 'stepson', 'guardian', 'ward', 'husband', 'ex-husband', 'wife', 'ex-wife', 'separated_husband', 'separated_wife', 'widower', 'widow', 'father-in-law', 'mother-in-law', 'brother-in-law', 'sister-in-law', 'son-in-law', 'daughter-in-law'))] else false()"> Possible values of symbol/@value are: 'father', 'son', 'daughter', 'mother', 'uncle', 'aunt', 'nephew_or_niece', 'sister', 'brother', 'grandfather', 'grandmother', 'grandson', 'granddaughter', 'cousin', 'stepmother', 'stepfather', 'stepdaughter', 'stepson', 'guardian', 'ward', 'husband', 'ex-husband', 'wife', 'ex-wife', 'separated_husband', 'separated_wife', 'widower', 'widow', 'father-in-law', 'mother-in-law', 'brother-in-law', 'sister-in-law', 'son-in-law', 'daughter-in-law'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'personal_position'][parent::tei:fs[@type eq 'relation_type']]">
                        <sch:report test="if (tei:symbol) then tei:symbol[not(@value = ('friend', 'lover', 'suitor', 'fianc√©', 'fianc√©e', 'neighbour'))] else false()"> Possible values of symbol/@value are: 'friend', 'lover', 'suitor', 'fianc√©', 'fianc√©e', 'neighbour'</sch:report>
                        <sch:report test="if (tei:vColl/tei:symbol) then tei:vColl/tei:symbol[not(@value = ('friend', 'lover', 'suitor', 'fianc√©', 'fianc√©e', 'neighbour'))] else false()"> Possible values of symbol/@value are: 'friend', 'lover', 'suitor', 'fianc√©', 'fianc√©e', 'neighbour'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'professional_position'][parent::tei:fs[@type eq 'relation_type']]">
                        <sch:report test="if (tei:symbol) then tei:symbol[not(@value = ('domestic_worker', 'employee/worker', 'apprentice', 'manager', 'associate', 'associated_with', 'unknown'))] else false()"> Possible values of symbol/@value are: 'domestic_worker', 'employee/worker', 'apprentice', 'manager', 'associate', 'associated_with', 'unknown'</sch:report>
                        <sch:report test="if (tei:vColl/tei:symbol) then tei:vColl/tei:symbol[not(@value = ('domestic_worker', 'employee/worker', 'apprentice', 'manager', 'associate', 'associated_with', 'unknown'))] else false()"> Possible values of symbol/@value are: 'domestic_worker', 'employee/worker', 'apprentice', 'manager', 'associate', 'associated_with', 'unknown'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'professional_category'][parent::tei:fs[@type eq 'professional_activities']]">
                        <sch:report test="if (tei:symbol) then tei:symbol[not(@value = ('professionals_scientific_technical', 'intermediate_professionals', 'service_and_sales', 'crafts', 'industry_and_transportation', 'agriculture', 'elementary_professions', 'rentiers', 'clergy', 'military', 'government_executive_officials', 'associative_world', 'unknown'))] else false()"> Possible values of symbol/@value are: 'professionals_scientific_technical', 'intermediate_professionals', 'service_and_sales', 'crafts', 'industry_and_transportation', 'agriculture', 'elementary_professions', 'rentiers', 'clergy', 'military', 'government_executive_officials', 'associative_world', 'unknown'</sch:report>
                        <sch:report test="if (tei:vColl/tei:symbol) then tei:vColl/tei:symbol[not(@value = ('professionals_scientific_technical', 'intermediate_professionals', 'service_and_sales', 'crafts', 'industry_and_transportation', 'agriculture', 'elementary_professions', 'rentiers', 'clergy', 'military', 'government_executive_officials', 'associative_world', 'unknown'))] else false()"> Possible values of symbol/@value are: 'professionals_scientific_technical', 'intermediate_professionals', 'service_and_sales', 'crafts', 'industry_and_transportation', 'agriculture', 'elementary_professions', 'rentiers', 'clergy', 'military', 'government_executive_officials', 'associative_world', 'unknown'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'occupation'][parent::tei:fs[@type eq 'professional_activities']]">
                        <sch:report test="if (tei:symbol) then tei:symbol[not(@value = ('abbot', 'accountant', 'acrobat', 'actress', 'alarm_trumpeter_(firefighter)', 'apprentice', 'architect', 'artist', 'artistic_horse_rider', 'assessor', 'association_leader', 'association_member', 'association_official', 'astronomer', 'astronomer_assistant', 'athlete', 'aviator', 'baker', 'bandmaster_(military)', 'bank_clerk', 'bank_director', 'banker', 'barber', 'barber_apprentice', 'basket_maker', 'basket_repairer', 'bear', 'beater', 'bicycle_store_owner', 'blacksmith', 'blacksmith_apprentice', 'bookbinder', 'brick_manufacturer', 'bricklayer', 'brigadier', 'building_manager', 'businessman', 'butcher', 'town_councilor', 'can_manufacturer', 'captain', 'captain_(military)', 'captain_of_the_knights', 'captain‚Äôs_adjudant', 'car_salesman', 'carpenter', 'castle_administrator', 'chair_maker', 'chief_judge', 'chief_of_security', 'chimney_sweeper', 'choir_member', 'circus_director', 'circus_worker', 'city_council_clerk', 'city_councillor', 'civil_servant/administration_official', 'association_president', 'clairvoyant', 'clerk', 'clown', 'coachman', 'colonel_(military)', 'companion', 'composer', 'conductor_(music)', 'confectioner', 'conman', 'contractor', 'cook', 'cooper', 'corn_operator_(chiropodist)', 'court_assistant', 'court_bailiff', 'court_secretary', 'sworn_translator', 'court_staff', 'court_usher', 'craftsman', 'custodian_(asylum)', 'customs_officer', 'dancer', 'day_labourer', 'delegate', 'deliverer/helper', 'deputy_mayor', 'detective', 'diplomat', 'director_in_a_Fashion_House', 'director_of_a_real_estate_agency', 'director_of_the_church_election_committee', 'director_of_the_democratic_election_committee', 'director_of_the_liberal_election_committee', 'district_director', 'doctor', 'domestic_cleaner', 'domestic_worker', 'doorman', 'driver', 'engineer', 'estate_administrator', 'factory_director', 'factory_owner', 'factory_worker', 'fairground_stand_owner', 'fanfare_president', 'farm_worker', 'farmer', 'farmer_leader', 'mayor', 'village_councilor', 'firefighter', 'firefighter_(caporal)', 'firefighter_(sergeant)', 'firefighter_director', 'fountain_maker', 'funeral_service_clerk', 'furniture_dealer', 'gardener', 'gendarm', 'gendarme', 'grape_picker', 'grocer', 'hairdresser', 'hairdresser_apprentice', 'hangman', 'head_farm_worker', 'head_firefighter', 'head_housemaid', 'horse_farmer', 'hotel_helper', 'hotel_maid', 'hotel_owner', 'housekeeper', 'hunter', 'hypnotizer', 'inn_attendant', 'inn_maid', 'insurance_agent', 'marriage_broker', 'insurance_clerk', 'insurance_inspector', 'journalist', 'judge', 'jurist', 'juror', 'knight', 'labourer', 'lady‚Äôs_maid', 'landlord', 'large_farmer', 'large_manufacturer', 'laundress', 'law_advisor', 'lawyer', 'lawyer_in_training', 'legal_counsel', 'member_of_veterans_association', 'lieutenant_(military)', 'lion_sheperd', 'locksmith', 'lottery_agent', 'luggage_carrier', 'magician', 'maid', 'mail_carrier', 'major_(military)', 'manager', 'manufacturer', 'marshal_of_the_court', 'master_blacksmith', 'master_cooper', 'master_hairdresser', 'master_laundress', 'master_of_arms', 'master_shoemaker', 'master_taylor', 'master_upholsterer', 'matchmaker', 'medical_doctor', 'member_of_election_committee', 'member_of_the_church_council', 'merchant', 'messenger', 'messenger/deliverer/helper', 'midwife', 'military', 'military_(retired)', 'military_man_(war_veteran)', 'military_men', 'milkman', 'miller', 'model', 'monk', 'mountain_guide', 'mounted_messenger', 'movie_director', 'music_copyist', 'music_teacher', 'musician', 'musketeer', 'newspaper_editor', 'newspaper_publisher', 'night_watchman', 'notary', 'office_helper', 'office_manager', 'office_worker', 'officer_(military)', 'one-year_volunteer', 'orderly_(military)', 'organist', 'orphanage_inspector', 'page', 'painter', 'painter_(artist)', 'parson', 'pastor', 'pastry_baker', 'pensioner', 'former_baker', 'pharmacist', 'pharmacy_assistant', 'philosophy_student', 'photographer', 'pianist', 'piano_teacher', 'piano_tuner', 'piano_tuner_apprentice', 'pig_farmer', 'poet', 'police_commissioner', 'police_inspector', 'police_secretary', 'policeman', 'policemant', 'porcelain_merchant', 'porter', 'post_office_director', 'pot_repairer', 'president_of_the_court', 'electoral_committee_president', 'president_of_veterans_association', 'cavalry_master', 'priest', 'prison_guard', 'private_teacher', 'professor', 'public_prosecutor', 'purser_(military)', 'quarry_owner', 'ranger', 'ranger_assistant', 'real_estate_agent', 'recruitment_agency_manager', 'rentier', 'city_council_candidate', 'master_locksmith', 'sausage_maker', 'smoking_pipe_maker', 'reservist', 'restaurateur', 'retired_farmer', 'rural_policeman', 'safety_inspector', 'sailor', 'salesman', 'sand_maker', 'sawmill_owner', 'sawyer', 'scholar', 'schoolmaster', 'scrap_collector', 'sculptor', 'seamstress', 'secretary', 'association_secretary', 'sequestrator', 'sergent-major_de_zouaves', 'servant_of_the_Emir', 'settler', 'sewer', 'sheperd', 'shepherd', 'cheesemaker', 'shipbuilder', 'shoemaker', 'shoemaker_apprentice', 'skipper', 'small_farmer', 'soapmaker', 'soldier', 'speculator', 'spice_merchant', 'sports_club_president', 'stable_lad', 'state_prosecutor', 'steam_engine_fireman', 'stonemason', 'student', 'stylist', 'sub-officer_(military)', 'sweeper', 'swineherd', 'taverner/innkeeper', 'postal_service_collaborator', 'taylor', 'taylor_(worker)', 'taylor_apprentice', 'teacher', 'telegraph_messenger', 'textile_merchant', 'town_councillor', 'theater_director', 'reciter', 'tinker', 'torch_bearer', 'town_crier', 'train_driver', 'trainee', 'tramway_driver', 'traveling_salesman', 'typist', 'umbrella_repairer', 'undercover_policeman', 'undermaid', 'undertaker', 'upholsterer', 'upholsterer_apprentice', 'valet', 'veterinary', 'vicar', 'village_elder', 'vinegar_boiler', 'violin_teacher', 'waiter', 'waitress', 'watchman', 'watchman/policeman', 'wig_maker', 'wine_maker', 'wine_merchant', 'wine_sales_representative', 'wizard', 'wolf', 'woodcutter', 'worker', 'wrestler', 'writer'))] else false()"> Possible values of symbol/@value are: 'abbot', 'accountant', 'acrobat', 'actress', 'alarm_trumpeter_(firefighter)', 'apprentice', 'architect', 'artist', 'artistic_horse_rider', 'assessor', 'association_leader', 'association_member', 'association_official', 'astronomer', 'astronomer_assistant', 'athlete', 'aviator', 'baker', 'bandmaster_(military)', 'bank_clerk', 'bank_director', 'banker', 'barber', 'barber_apprentice', 'basket_maker', 'basket_repairer', 'bear', 'beater', 'bicycle_store_owner', 'blacksmith', 'blacksmith_apprentice', 'bookbinder', 'brick_manufacturer', 'bricklayer', 'brigadier', 'building_manager', 'businessman', 'butcher', 'town_councilor', 'can_manufacturer', 'captain', 'captain_(military)', 'captain_of_the_knights', 'captain‚Äôs_adjudant', 'car_salesman', 'carpenter', 'castle_administrator', 'chair_maker', 'chief_judge', 'chief_of_security', 'chimney_sweeper', 'choir_member', 'circus_director', 'circus_worker', 'city_council_clerk', 'city_councillor', 'civil_servant/administration_official', 'association_president', 'clairvoyant', 'clerk', 'clown', 'coachman', 'colonel_(military)', 'companion', 'composer', 'conductor_(music)', 'confectioner', 'conman', 'contractor', 'cook', 'cooper', 'corn_operator_(chiropodist)', 'court_assistant', 'court_bailiff', 'court_secretary', 'sworn_translator', 'court_staff', 'court_usher', 'craftsman', 'custodian_(asylum)', 'customs_officer', 'dancer', 'day_labourer', 'delegate', 'deliverer/helper', 'deputy_mayor', 'detective', 'diplomat', 'director_in_a_Fashion_House', 'director_of_a_real_estate_agency', 'director_of_the_church_election_committee', 'director_of_the_democratic_election_committee', 'director_of_the_liberal_election_committee', 'district_director', 'doctor', 'domestic_cleaner', 'domestic_worker', 'doorman', 'driver', 'engineer', 'estate_administrator', 'factory_director', 'factory_owner', 'factory_worker', 'fairground_stand_owner', 'fanfare_president', 'farm_worker', 'farmer', 'farmer_leader', 'mayor', 'village_councilor', 'firefighter', 'firefighter_(caporal)', 'firefighter_(sergeant)', 'firefighter_director', 'fountain_maker', 'funeral_service_clerk', 'furniture_dealer', 'gardener', 'gendarm', 'gendarme', 'grape_picker', 'grocer', 'hairdresser', 'hairdresser_apprentice', 'hangman', 'head_farm_worker', 'head_firefighter', 'head_housemaid', 'horse_farmer', 'hotel_helper', 'hotel_maid', 'hotel_owner', 'housekeeper', 'hunter', 'hypnotizer', 'inn_attendant', 'inn_maid', 'insurance_agent', 'marriage_broker', 'insurance_clerk', 'insurance_inspector', 'journalist', 'judge', 'jurist', 'juror', 'knight', 'labourer', 'lady‚Äôs_maid', 'landlord', 'large_farmer', 'large_manufacturer', 'laundress', 'law_advisor', 'lawyer', 'lawyer_in_training', 'legal_counsel', 'member_of_veterans_association', 'lieutenant_(military)', 'lion_sheperd', 'locksmith', 'lottery_agent', 'luggage_carrier', 'magician', 'maid', 'mail_carrier', 'major_(military)', 'manager', 'manufacturer', 'marshal_of_the_court', 'master_blacksmith', 'master_cooper', 'master_hairdresser', 'master_laundress', 'master_of_arms', 'master_shoemaker', 'master_taylor', 'master_upholsterer', 'matchmaker', 'medical_doctor', 'member_of_election_committee', 'member_of_the_church_council', 'merchant', 'messenger', 'messenger/deliverer/helper', 'midwife', 'military', 'military_(retired)', 'military_man_(war_veteran)', 'military_men', 'milkman', 'miller', 'model', 'monk', 'mountain_guide', 'mounted_messenger', 'movie_director', 'music_copyist', 'music_teacher', 'musician', 'musketeer', 'newspaper_editor', 'newspaper_publisher', 'night_watchman', 'notary', 'office_helper', 'office_manager', 'office_worker', 'officer_(military)', 'one-year_volunteer', 'orderly_(military)', 'organist', 'orphanage_inspector', 'page', 'painter', 'painter_(artist)', 'parson', 'pastor', 'pastry_baker', 'pensioner', 'former_baker', 'pharmacist', 'pharmacy_assistant', 'philosophy_student', 'photographer', 'pianist', 'piano_teacher', 'piano_tuner', 'piano_tuner_apprentice', 'pig_farmer', 'poet', 'police_commissioner', 'police_inspector', 'police_secretary', 'policeman', 'policemant', 'porcelain_merchant', 'porter', 'post_office_director', 'pot_repairer', 'president_of_the_court', 'electoral_committee_president', 'president_of_veterans_association', 'cavalry_master', 'priest', 'prison_guard', 'private_teacher', 'professor', 'public_prosecutor', 'purser_(military)', 'quarry_owner', 'ranger', 'ranger_assistant', 'real_estate_agent', 'recruitment_agency_manager', 'rentier', 'city_council_candidate', 'master_locksmith', 'sausage_maker', 'smoking_pipe_maker', 'reservist', 'restaurateur', 'retired_farmer', 'rural_policeman', 'safety_inspector', 'sailor', 'salesman', 'sand_maker', 'sawmill_owner', 'sawyer', 'scholar', 'schoolmaster', 'scrap_collector', 'sculptor', 'seamstress', 'secretary', 'association_secretary', 'sequestrator', 'sergent-major_de_zouaves', 'servant_of_the_Emir', 'settler', 'sewer', 'sheperd', 'shepherd', 'cheesemaker', 'shipbuilder', 'shoemaker', 'shoemaker_apprentice', 'skipper', 'small_farmer', 'soapmaker', 'soldier', 'speculator', 'spice_merchant', 'sports_club_president', 'stable_lad', 'state_prosecutor', 'steam_engine_fireman', 'stonemason', 'student', 'stylist', 'sub-officer_(military)', 'sweeper', 'swineherd', 'taverner/innkeeper', 'postal_service_collaborator', 'taylor', 'taylor_(worker)', 'taylor_apprentice', 'teacher', 'telegraph_messenger', 'textile_merchant', 'town_councillor', 'theater_director', 'reciter', 'tinker', 'torch_bearer', 'town_crier', 'train_driver', 'trainee', 'tramway_driver', 'traveling_salesman', 'typist', 'umbrella_repairer', 'undercover_policeman', 'undermaid', 'undertaker', 'upholsterer', 'upholsterer_apprentice', 'valet', 'veterinary', 'vicar', 'village_elder', 'vinegar_boiler', 'violin_teacher', 'waiter', 'waitress', 'watchman', 'watchman/policeman', 'wig_maker', 'wine_maker', 'wine_merchant', 'wine_sales_representative', 'wizard', 'wolf', 'woodcutter', 'worker', 'wrestler', 'writer'</sch:report>
                        <sch:report test="if (tei:vColl/tei:symbol) then tei:vColl/tei:symbol[not(@value = ('abbot', 'accountant', 'acrobat', 'actress', 'alarm_trumpeter_(firefighter)', 'apprentice', 'architect', 'artist', 'artistic_horse_rider', 'assessor', 'association_leader', 'association_member', 'association_official', 'astronomer', 'astronomer_assistant', 'athlete', 'aviator', 'baker', 'bandmaster_(military)', 'bank_clerk', 'bank_director', 'banker', 'barber', 'barber_apprentice', 'basket_maker', 'basket_repairer', 'bear', 'beater', 'bicycle_store_owner', 'blacksmith', 'blacksmith_apprentice', 'bookbinder', 'brick_manufacturer', 'bricklayer', 'brigadier', 'building_manager', 'businessman', 'butcher', 'town_councilor', 'can_manufacturer', 'captain', 'captain_(military)', 'captain_of_the_knights', 'captain‚Äôs_adjudant', 'car_salesman', 'carpenter', 'castle_administrator', 'chair_maker', 'chief_judge', 'chief_of_security', 'chimney_sweeper', 'choir_member', 'circus_director', 'circus_worker', 'city_council_clerk', 'city_councillor', 'civil_servant/administration_official', 'association_president', 'clairvoyant', 'clerk', 'clown', 'coachman', 'colonel_(military)', 'companion', 'composer', 'conductor_(music)', 'confectioner', 'conman', 'contractor', 'cook', 'cooper', 'corn_operator_(chiropodist)', 'court_assistant', 'court_bailiff', 'court_secretary', 'sworn_translator', 'court_staff', 'court_usher', 'craftsman', 'custodian_(asylum)', 'customs_officer', 'dancer', 'day_labourer', 'delegate', 'deliverer/helper', 'deputy_mayor', 'detective', 'diplomat', 'director_in_a_Fashion_House', 'director_of_a_real_estate_agency', 'director_of_the_church_election_committee', 'director_of_the_democratic_election_committee', 'director_of_the_liberal_election_committee', 'district_director', 'doctor', 'domestic_cleaner', 'domestic_worker', 'doorman', 'driver', 'engineer', 'estate_administrator', 'factory_director', 'factory_owner', 'factory_worker', 'fairground_stand_owner', 'fanfare_president', 'farm_worker', 'farmer', 'farmer_leader', 'mayor', 'village_councilor', 'firefighter', 'firefighter_(caporal)', 'firefighter_(sergeant)', 'firefighter_director', 'fountain_maker', 'funeral_service_clerk', 'furniture_dealer', 'gardener', 'gendarm', 'gendarme', 'grape_picker', 'grocer', 'hairdresser', 'hairdresser_apprentice', 'hangman', 'head_farm_worker', 'head_firefighter', 'head_housemaid', 'horse_farmer', 'hotel_helper', 'hotel_maid', 'hotel_owner', 'housekeeper', 'hunter', 'hypnotizer', 'inn_attendant', 'inn_maid', 'insurance_agent', 'marriage_broker', 'insurance_clerk', 'insurance_inspector', 'journalist', 'judge', 'jurist', 'juror', 'knight', 'labourer', 'lady‚Äôs_maid', 'landlord', 'large_farmer', 'large_manufacturer', 'laundress', 'law_advisor', 'lawyer', 'lawyer_in_training', 'legal_counsel', 'member_of_veterans_association', 'lieutenant_(military)', 'lion_sheperd', 'locksmith', 'lottery_agent', 'luggage_carrier', 'magician', 'maid', 'mail_carrier', 'major_(military)', 'manager', 'manufacturer', 'marshal_of_the_court', 'master_blacksmith', 'master_cooper', 'master_hairdresser', 'master_laundress', 'master_of_arms', 'master_shoemaker', 'master_taylor', 'master_upholsterer', 'matchmaker', 'medical_doctor', 'member_of_election_committee', 'member_of_the_church_council', 'merchant', 'messenger', 'messenger/deliverer/helper', 'midwife', 'military', 'military_(retired)', 'military_man_(war_veteran)', 'military_men', 'milkman', 'miller', 'model', 'monk', 'mountain_guide', 'mounted_messenger', 'movie_director', 'music_copyist', 'music_teacher', 'musician', 'musketeer', 'newspaper_editor', 'newspaper_publisher', 'night_watchman', 'notary', 'office_helper', 'office_manager', 'office_worker', 'officer_(military)', 'one-year_volunteer', 'orderly_(military)', 'organist', 'orphanage_inspector', 'page', 'painter', 'painter_(artist)', 'parson', 'pastor', 'pastry_baker', 'pensioner', 'former_baker', 'pharmacist', 'pharmacy_assistant', 'philosophy_student', 'photographer', 'pianist', 'piano_teacher', 'piano_tuner', 'piano_tuner_apprentice', 'pig_farmer', 'poet', 'police_commissioner', 'police_inspector', 'police_secretary', 'policeman', 'policemant', 'porcelain_merchant', 'porter', 'post_office_director', 'pot_repairer', 'president_of_the_court', 'electoral_committee_president', 'president_of_veterans_association', 'cavalry_master', 'priest', 'prison_guard', 'private_teacher', 'professor', 'public_prosecutor', 'purser_(military)', 'quarry_owner', 'ranger', 'ranger_assistant', 'real_estate_agent', 'recruitment_agency_manager', 'rentier', 'city_council_candidate', 'master_locksmith', 'sausage_maker', 'smoking_pipe_maker', 'reservist', 'restaurateur', 'retired_farmer', 'rural_policeman', 'safety_inspector', 'sailor', 'salesman', 'sand_maker', 'sawmill_owner', 'sawyer', 'scholar', 'schoolmaster', 'scrap_collector', 'sculptor', 'seamstress', 'secretary', 'association_secretary', 'sequestrator', 'sergent-major_de_zouaves', 'servant_of_the_Emir', 'settler', 'sewer', 'sheperd', 'shepherd', 'cheesemaker', 'shipbuilder', 'shoemaker', 'shoemaker_apprentice', 'skipper', 'small_farmer', 'soapmaker', 'soldier', 'speculator', 'spice_merchant', 'sports_club_president', 'stable_lad', 'state_prosecutor', 'steam_engine_fireman', 'stonemason', 'student', 'stylist', 'sub-officer_(military)', 'sweeper', 'swineherd', 'taverner/innkeeper', 'postal_service_collaborator', 'taylor', 'taylor_(worker)', 'taylor_apprentice', 'teacher', 'telegraph_messenger', 'textile_merchant', 'town_councillor', 'theater_director', 'reciter', 'tinker', 'torch_bearer', 'town_crier', 'train_driver', 'trainee', 'tramway_driver', 'traveling_salesman', 'typist', 'umbrella_repairer', 'undercover_policeman', 'undermaid', 'undertaker', 'upholsterer', 'upholsterer_apprentice', 'valet', 'veterinary', 'vicar', 'village_elder', 'vinegar_boiler', 'violin_teacher', 'waiter', 'waitress', 'watchman', 'watchman/policeman', 'wig_maker', 'wine_maker', 'wine_merchant', 'wine_sales_representative', 'wizard', 'wolf', 'woodcutter', 'worker', 'wrestler', 'writer'))] else false()"> Possible values of symbol/@value are: 'abbot', 'accountant', 'acrobat', 'actress', 'alarm_trumpeter_(firefighter)', 'apprentice', 'architect', 'artist', 'artistic_horse_rider', 'assessor', 'association_leader', 'association_member', 'association_official', 'astronomer', 'astronomer_assistant', 'athlete', 'aviator', 'baker', 'bandmaster_(military)', 'bank_clerk', 'bank_director', 'banker', 'barber', 'barber_apprentice', 'basket_maker', 'basket_repairer', 'bear', 'beater', 'bicycle_store_owner', 'blacksmith', 'blacksmith_apprentice', 'bookbinder', 'brick_manufacturer', 'bricklayer', 'brigadier', 'building_manager', 'businessman', 'butcher', 'town_councilor', 'can_manufacturer', 'captain', 'captain_(military)', 'captain_of_the_knights', 'captain‚Äôs_adjudant', 'car_salesman', 'carpenter', 'castle_administrator', 'chair_maker', 'chief_judge', 'chief_of_security', 'chimney_sweeper', 'choir_member', 'circus_director', 'circus_worker', 'city_council_clerk', 'city_councillor', 'civil_servant/administration_official', 'association_president', 'clairvoyant', 'clerk', 'clown', 'coachman', 'colonel_(military)', 'companion', 'composer', 'conductor_(music)', 'confectioner', 'conman', 'contractor', 'cook', 'cooper', 'corn_operator_(chiropodist)', 'court_assistant', 'court_bailiff', 'court_secretary', 'sworn_translator', 'court_staff', 'court_usher', 'craftsman', 'custodian_(asylum)', 'customs_officer', 'dancer', 'day_labourer', 'delegate', 'deliverer/helper', 'deputy_mayor', 'detective', 'diplomat', 'director_in_a_Fashion_House', 'director_of_a_real_estate_agency', 'director_of_the_church_election_committee', 'director_of_the_democratic_election_committee', 'director_of_the_liberal_election_committee', 'district_director', 'doctor', 'domestic_cleaner', 'domestic_worker', 'doorman', 'driver', 'engineer', 'estate_administrator', 'factory_director', 'factory_owner', 'factory_worker', 'fairground_stand_owner', 'fanfare_president', 'farm_worker', 'farmer', 'farmer_leader', 'mayor', 'village_councilor', 'firefighter', 'firefighter_(caporal)', 'firefighter_(sergeant)', 'firefighter_director', 'fountain_maker', 'funeral_service_clerk', 'furniture_dealer', 'gardener', 'gendarm', 'gendarme', 'grape_picker', 'grocer', 'hairdresser', 'hairdresser_apprentice', 'hangman', 'head_farm_worker', 'head_firefighter', 'head_housemaid', 'horse_farmer', 'hotel_helper', 'hotel_maid', 'hotel_owner', 'housekeeper', 'hunter', 'hypnotizer', 'inn_attendant', 'inn_maid', 'insurance_agent', 'marriage_broker', 'insurance_clerk', 'insurance_inspector', 'journalist', 'judge', 'jurist', 'juror', 'knight', 'labourer', 'lady‚Äôs_maid', 'landlord', 'large_farmer', 'large_manufacturer', 'laundress', 'law_advisor', 'lawyer', 'lawyer_in_training', 'legal_counsel', 'member_of_veterans_association', 'lieutenant_(military)', 'lion_sheperd', 'locksmith', 'lottery_agent', 'luggage_carrier', 'magician', 'maid', 'mail_carrier', 'major_(military)', 'manager', 'manufacturer', 'marshal_of_the_court', 'master_blacksmith', 'master_cooper', 'master_hairdresser', 'master_laundress', 'master_of_arms', 'master_shoemaker', 'master_taylor', 'master_upholsterer', 'matchmaker', 'medical_doctor', 'member_of_election_committee', 'member_of_the_church_council', 'merchant', 'messenger', 'messenger/deliverer/helper', 'midwife', 'military', 'military_(retired)', 'military_man_(war_veteran)', 'military_men', 'milkman', 'miller', 'model', 'monk', 'mountain_guide', 'mounted_messenger', 'movie_director', 'music_copyist', 'music_teacher', 'musician', 'musketeer', 'newspaper_editor', 'newspaper_publisher', 'night_watchman', 'notary', 'office_helper', 'office_manager', 'office_worker', 'officer_(military)', 'one-year_volunteer', 'orderly_(military)', 'organist', 'orphanage_inspector', 'page', 'painter', 'painter_(artist)', 'parson', 'pastor', 'pastry_baker', 'pensioner', 'former_baker', 'pharmacist', 'pharmacy_assistant', 'philosophy_student', 'photographer', 'pianist', 'piano_teacher', 'piano_tuner', 'piano_tuner_apprentice', 'pig_farmer', 'poet', 'police_commissioner', 'police_inspector', 'police_secretary', 'policeman', 'policemant', 'porcelain_merchant', 'porter', 'post_office_director', 'pot_repairer', 'president_of_the_court', 'electoral_committee_president', 'president_of_veterans_association', 'cavalry_master', 'priest', 'prison_guard', 'private_teacher', 'professor', 'public_prosecutor', 'purser_(military)', 'quarry_owner', 'ranger', 'ranger_assistant', 'real_estate_agent', 'recruitment_agency_manager', 'rentier', 'city_council_candidate', 'master_locksmith', 'sausage_maker', 'smoking_pipe_maker', 'reservist', 'restaurateur', 'retired_farmer', 'rural_policeman', 'safety_inspector', 'sailor', 'salesman', 'sand_maker', 'sawmill_owner', 'sawyer', 'scholar', 'schoolmaster', 'scrap_collector', 'sculptor', 'seamstress', 'secretary', 'association_secretary', 'sequestrator', 'sergent-major_de_zouaves', 'servant_of_the_Emir', 'settler', 'sewer', 'sheperd', 'shepherd', 'cheesemaker', 'shipbuilder', 'shoemaker', 'shoemaker_apprentice', 'skipper', 'small_farmer', 'soapmaker', 'soldier', 'speculator', 'spice_merchant', 'sports_club_president', 'stable_lad', 'state_prosecutor', 'steam_engine_fireman', 'stonemason', 'student', 'stylist', 'sub-officer_(military)', 'sweeper', 'swineherd', 'taverner/innkeeper', 'postal_service_collaborator', 'taylor', 'taylor_(worker)', 'taylor_apprentice', 'teacher', 'telegraph_messenger', 'textile_merchant', 'town_councillor', 'theater_director', 'reciter', 'tinker', 'torch_bearer', 'town_crier', 'train_driver', 'trainee', 'tramway_driver', 'traveling_salesman', 'typist', 'umbrella_repairer', 'undercover_policeman', 'undermaid', 'undertaker', 'upholsterer', 'upholsterer_apprentice', 'valet', 'veterinary', 'vicar', 'village_elder', 'vinegar_boiler', 'violin_teacher', 'waiter', 'waitress', 'watchman', 'watchman/policeman', 'wig_maker', 'wine_maker', 'wine_merchant', 'wine_sales_representative', 'wizard', 'wolf', 'woodcutter', 'worker', 'wrestler', 'writer'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'social_class'][parent::tei:fs[@type eq 'socio_economic_other']]">
                        <sch:report test="if (tei:symbol) then tei:symbol[not(@value = ('lower_class', 'lower_middle_class', 'middle_class', 'upper_middle_class', 'upper_class', 'unknown'))] else false()"> Possible values of symbol/@value are: 'lower_class', 'lower_middle_class', 'middle_class', 'upper_middle_class', 'upper_class', 'unknown'</sch:report>
                        <sch:report test="if (tei:vColl/tei:symbol) then tei:vColl/tei:symbol[not(@value = ('lower_class', 'lower_middle_class', 'middle_class', 'upper_middle_class', 'upper_class', 'unknown'))] else false()"> Possible values of symbol/@value are: 'lower_class', 'lower_middle_class', 'middle_class', 'upper_middle_class', 'upper_class', 'unknown'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'socioeconomic_status_cerf'][parent::tei:fs[@type eq 'socio_economic_other']]">
                        <sch:report test="if (tei:symbol) then tei:symbol[not(@value = ('very_poor_people', 'elementary_professions', 'crafts', 'employees', 'rentiers', 'liberal_professionals', 'industrialists'))] else false()"> Possible values of symbol/@value are: 'very_poor_people', 'elementary_professions', 'crafts', 'employees', 'rentiers', 'liberal_professionals', 'industrialists'</sch:report>
                        <sch:report test="if (tei:vColl/tei:symbol) then tei:vColl/tei:symbol[not(@value = ('very_poor_people', 'elementary_professions', 'crafts', 'employees', 'rentiers', 'liberal_professionals', 'industrialists'))] else false()"> Possible values of symbol/@value are: 'very_poor_people', 'elementary_professions', 'crafts', 'employees', 'rentiers', 'liberal_professionals', 'industrialists'</sch:report>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'collective_character'][parent::tei:fs[@type eq 'synthetic_features']]">
                        <sch:assert test="tei:binary"> Element binary is
                    mandatory </sch:assert>
                     </sch:rule>
                     <sch:rule context="tei:text/descendant::tei:f[@name eq 'actantial_role'][parent::tei:fs[@type eq 'synthetic_features']]">
                        <sch:report test="if (tei:symbol) then tei:symbol[not(@value = ('lover', 'subject', 'opponent', 'adjuvant', 'authority', 'trouble_maker', 'episodic'))] else false()"> Possible values of symbol/@value are: 'lover', 'subject', 'opponent', 'adjuvant', 'authority', 'trouble_maker', 'episodic'</sch:report>
                        <sch:report test="if (tei:vColl/tei:symbol) then tei:vColl/tei:symbol[not(@value = ('lover', 'subject', 'opponent', 'adjuvant', 'authority', 'trouble_maker', 'episodic'))] else false()"> Possible values of symbol/@value are: 'lover', 'subject', 'opponent', 'adjuvant', 'authority', 'trouble_maker', 'episodic'</sch:report>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
            </elementSpec>
         </schemaSpec>
      </body>
   </text>
</TEI>
